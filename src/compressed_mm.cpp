//
// auto-generated by mm.py
//
#include <math.h>
#include <stdio.h>
#include <omp.h>
#include <cmath>
#include <iostream>

#include "MultidimArray.hpp"
#include "compressed_cell_centric/Arguments.hpp"
#include "compressed_cell_centric/Computation.hpp"
#include "full_matrix/Data.hpp"

using namespace std;
using namespace MM;
using namespace MM::compressed_cell_centric;
//
// mm_par_loop declarations
//

void mm_par_loop_anonymusAt2786(std::string, Computation<2>&,
  IN<CellMatData<2>>,
  IN<CellMatData<2>>,
  IN<CellData<2>>,
  REDUCE<CellData<2>>);

void mm_par_loop_anonymusAt3201(std::string, Computation<2>&,
  OUT<CellMatData<2>>,
  IN<MatData<2>>,
  IN<CellMatData<2>>,
  IN<CellMatData<2>>,
  IN<CellMatData<2>>);

void mm_par_loop_anonymusAt3831(std::string, Computation<2>&,
  NEIGH<CellData<2>>,
  NEIGH<CellData<2>>,
  NEIGH<CellMatData<2>>,
  NEIGH<CellMatData<2>>,
  OUT<CellMatData<2>>);

extern void compact_matrix_cell_centric(unsigned int sizex, unsigned int sizey, int Nmats, MM::full_matrix::Data<2> &d,
	MM::full_matrix::CellMatData<2>& f_rho, MM::full_matrix::CellMatData<2>& f_rho_mat_ave,
  MM::full_matrix::CellMatData<2>& f_p, MM::full_matrix::CellMatData<2>& f_Vf, MM::full_matrix::CellMatData<2>& f_t,
	MM::full_matrix::CellData<2>& f_V, MM::full_matrix::CellData<2>& f_x, MM::full_matrix::CellData<2>& f_y,
	MM::full_matrix::MatData<2>& f_n, MM::full_matrix::CellData<2>& f_rho_ave, vector<vector<size_t>> &mats)
{
  Data<2> data({sizex, sizey}, mats);

  CellMatData<2> rho = data.new_cell_mat_data();
  CellMatData<2> rho_mat_ave = data.new_cell_mat_data();
  CellMatData<2> p = data.new_cell_mat_data();
  CellMatData<2> Vf = data.new_cell_mat_data();
  CellMatData<2> t = data.new_cell_mat_data();

  CellData<2> V = data.new_cell_data();
  CellData<2> x = data.new_cell_data();
  CellData<2> y = data.new_cell_data();
  CellData<2> rho_ave = data.new_cell_data();

  MatData<2> n = data.new_mat_data();

  size_t compact_idx = 0;
  for (size_t j = 0; j <  sizey; j++) {
    for (size_t i = 0; i <  sizex; i++) {
      size_t idx = j * sizex + i;
      if (mats[idx].size() > 1) {
        for (size_t m = 0; m < mats[idx].size(); m++) {
          rho.mixed_storage_value_at(compact_idx) = f_rho.at(Coords<2>(i,j),mats[idx][m]);
          Vf.mixed_storage_value_at(compact_idx) = f_Vf.at(Coords<2>(i,j),mats[idx][m]);
          p.mixed_storage_value_at(compact_idx) = f_p.at(Coords<2>(i,j),mats[idx][m]);
          t.mixed_storage_value_at(compact_idx) = f_t.at(Coords<2>(i,j),mats[idx][m]);
          compact_idx++;
        }
      } else {
        rho.cell_value_at(idx) = f_rho.at(Coords<2>(i,j),mats[idx][0]);
        Vf.cell_value_at(idx) = f_Vf.at(Coords<2>(i,j),mats[idx][0]);
        p.cell_value_at(idx) = f_p.at(Coords<2>(i,j),mats[idx][0]);
        t.cell_value_at(idx) = f_t.at(Coords<2>(i,j),mats[idx][0]);
      }
        V[Coords<2>(i,j)] = f_V[Coords<2>(i,j)];
        x[Coords<2>(i,j)] = f_x[Coords<2>(i,j)];
        y[Coords<2>(i,j)] = f_y[Coords<2>(i,j)];
    }
  }
  for (size_t mat = 0; mat < Nmats; mat++) {
    n[mat] = f_n[mat];
  }


  double t1 = omp_get_wtime();
  auto INC = [] (double left, double right) {
    return left + right;
  };
  IndexGenerator<2> index_generator({0, 0}, {sizex, sizey});
  Computation<2> computation(data, index_generator);
  mm_par_loop_anonymusAt2786("anonymusAt2786", computation,
              IN<CellMatData<2>>(rho),
              IN<CellMatData<2>>(Vf),
              IN<CellData<2>>(V),
              REDUCE<CellData<2>>(INC, rho_ave));;

  printf("Compact matrix, cell centric, alg 1: %g sec\n", omp_get_wtime()-t1);

  t1 = omp_get_wtime();
  Computation<2> computation3(data, index_generator);
  mm_par_loop_anonymusAt3201("anonymusAt3201", computation3,
              OUT<CellMatData<2>>(p),
              IN<MatData<2>>(n),
              IN<CellMatData<2>>(rho),
              IN<CellMatData<2>>(t),
              IN<CellMatData<2>>(Vf));;
  printf("Compact matrix, cell centric, alg 2: %g sec\n", omp_get_wtime()-t1);

  t1 = omp_get_wtime();
  Stencil<2> s9pt({{1,1},  {1,0},  {1,-1},
       {0,1},  {0,0},  {0,-1},
       {-1,1}, {-1,0}, {-1,-1}});
  IndexGenerator<2> index_generator2({1, 1}, {sizex-1, sizey-1});
  Computation<2> computation2(data, index_generator2);
  mm_par_loop_anonymusAt3831("anonymusAt3831", computation2,
              NEIGH<CellData<2>>(x, s9pt),
              NEIGH<CellData<2>>(y, s9pt),
              NEIGH<CellMatData<2>>(Vf, s9pt),
              NEIGH<CellMatData<2>>(rho, s9pt),
              OUT<CellMatData<2>>(rho_mat_ave));;
  printf("Compact matrix, cell centric, alg 3: %g sec\n", omp_get_wtime()-t1);
}
