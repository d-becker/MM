//
// auto-generated by mm.py
//
#include <math.h>
#include <stdio.h>
#include <omp.h>
#include <cmath>
#include <iostream>

#include "Arguments.hpp"
#include "Computation.hpp"
#include "Coords.hpp"
#include "Data.hpp"
#include "Datasets.hpp"
#include "IndexGenerator.hpp"

using namespace std;
using namespace MM;
using namespace MM::full_matrix;
//
// mm_par_loop declarations
//

void mm_par_loop_anonymusAt846(std::string, Computation<2>&,
  IN<CellMatData<2>>,
  IN<CellMatData<2>>,
  IN<CellData<2>>,
  REDUCE<CellData<2>>);

void mm_par_loop_anonymusAt1258(std::string, Computation<2>&,
  OUT<CellMatData<2>>,
  IN<MatData<2>>,
  IN<CellMatData<2>>,
  IN<CellMatData<2>>,
  IN<CellMatData<2>>);

void mm_par_loop_anonymusAt1885(std::string, Computation<2>&,
  NEIGH<CellData<2>>,
  NEIGH<CellData<2>>,
  NEIGH<CellMatData<2>>,
  NEIGH<CellMatData<2>>,
  OUT<CellMatData<2>>);

void full_matrix_cell_centric(unsigned int sizex, unsigned int sizey, int Nmats, Data<2> &data,
	CellMatData<2>& rho, CellMatData<2>& rho_mat_ave, CellMatData<2>& p, CellMatData<2>& Vf, CellMatData<2>& t,
	CellData<2>& V, CellData<2>& x, CellData<2>& y,
	MatData<2>& n, CellData<2> &rho_ave)
{


  double t1 = omp_get_wtime();
  auto INC = [] (double left, double right) {
    return left + right;
  };
  IndexGenerator<2> index_generator({0, 0}, {sizex, sizey});
  Computation<2> computation(data, index_generator);
  mm_par_loop_anonymusAt846("anonymusAt846", computation,
              IN<CellMatData<2>>(rho),
              IN<CellMatData<2>>(Vf),
              IN<CellData<2>>(V),
              REDUCE<CellData<2>>(INC, rho_ave));;

  printf("Full matrix, cell centric, alg 1: %g sec\n", omp_get_wtime()-t1);

  t1 = omp_get_wtime();
  Computation<2> computation3(data, index_generator);
  mm_par_loop_anonymusAt1258("anonymusAt1258", computation3,
              OUT<CellMatData<2>>(p),
              IN<MatData<2>>(n),
              IN<CellMatData<2>>(rho),
              IN<CellMatData<2>>(t),
              IN<CellMatData<2>>(Vf));;
  printf("Full matrix, cell centric, alg 2: %g sec\n", omp_get_wtime()-t1);

  t1 = omp_get_wtime();
  Stencil<2> s9pt({{1,1},  {1,0},  {1,-1},
       {0,1},  {0,0},  {0,-1},
       {-1,1}, {-1,0}, {-1,-1}});
  IndexGenerator<2> index_generator2({1, 1}, {sizex-1, sizey-1});
  Computation<2> computation2(data, index_generator2);
  mm_par_loop_anonymusAt1885("anonymusAt1885", computation2,
              NEIGH<CellData<2>>(x, s9pt),
              NEIGH<CellData<2>>(y, s9pt),
              NEIGH<CellMatData<2>>(Vf, s9pt),
              NEIGH<CellMatData<2>>(rho, s9pt),
              OUT<CellMatData<2>>(rho_mat_ave));;
  printf("Full matrix, cell centric, alg 3: %g sec\n", omp_get_wtime()-t1);
}
