//
// auto-generated by mm.py
//
#include <iostream>
#include "full_matrix/Computation.hpp"
#include "Arguments.hpp"
#include "Data.hpp"
#include "IndexGenerator.hpp"

using namespace MM;
using namespace MM::full_matrix;

#define NeighProxy NeighProxyDirect

//user function
inline void anonymusAt1901(NeighProxy<CellData<2>> x, NeighProxy<CellData<2>> y,
                          NeighProxy<CellMatData<2>> Vf, NeighProxy<CellMatData<2>> rho,
                          double &rho_out) {
			double xo = x[{0,0}];
			double yo = y[{0,0}];

			double dsqr[9];

			for (int nj = -1; nj <= 1; nj++) {
				for (int ni = -1; ni <= 1; ni++) {

					dsqr[(nj+1)*3 + (ni+1)] = 0.0;

					double xi = x[{ni,nj}];
					double yi = y[{ni,nj}];

					dsqr[(nj+1)*3 + (ni+1)] += (xo - xi) * (xo - xi);
					dsqr[(nj+1)*3 + (ni+1)] += (yo - yi) * (yo - yi);
				}
			}
      if (Vf[{0,0}] > 0.0) {
        double rho_sum = 0.0;
        int Nn = 0;

        for (int nj = -1; nj <= 1; nj++) {
          for (int ni = -1; ni <= 1; ni++) {

            if (Vf[{ni,nj}] > 0.0) {
              rho_sum += rho[{ni,nj}] / dsqr[(nj+1)*3 + (ni+1)];
              Nn += 1;
            }
          }
        }
        rho_out = rho_sum / Nn;
      } else
        rho_out = 0.0;
    }

// host stub function
void mm_par_loop_anonymusAt1901(std::string name, Computation<2> &computation,
 NEIGH<CellData<2>> arg0, NEIGH<CellData<2>> arg1, NEIGH<CellMatData<2>> arg2, NEIGH<CellMatData<2>> arg3,
 OUT<CellMatData<2>> arg4) {
  const std::array<std::size_t, 2> &begin = computation.index_generator.get_begin();
  const std::array<std::size_t, 2> &end = computation.index_generator.get_end();
  std::array<std::size_t,2> shape0;
  std::vector<double *> data0 = arg0.get_raw(shape0);
  std::array<std::size_t,2> shape1;
  std::vector<double *> data1 = arg1.get_raw(shape1);
  std::array<std::size_t,2> shape2;
  std::vector<double *> data2 = arg2.get_raw(shape2);
  std::array<std::size_t,2> shape3;
  std::vector<double *> data3 = arg3.get_raw(shape3);
  std::array<std::size_t,2> shape4;
  std::vector<double *> data4 = arg4.get_raw(shape4);
  for (std::size_t mat_index = 0; mat_index < computation.data.get_mat_number(); mat_index++) {
    for (std::size_t j = begin[1]; j < end[1]; j++) {
      for (std::size_t i = begin[0]; i < end[0]; i++) {
        const Coords<2> coords(i, j);
        anonymusAt1901(
          NeighProxy<CellData<2>>(shape0, &data0[0][i+j*shape0[0]]),
          NeighProxy<CellData<2>>(shape1, &data1[0][i+j*shape1[0]]),
          NeighProxy<CellMatData<2>>(shape2, &data2[mat_index][i+j*shape2[0]]),
          NeighProxy<CellMatData<2>>(shape3, &data3[mat_index][i+j*shape3[0]]),
          data4[mat_index][i+j*shape4[0]]);
      }
    }
  }
}
