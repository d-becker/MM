//
// auto-generated by mm.py
//
#include <iostream>
#include "full_matrix/Computation.hpp"
#include "Arguments.hpp"
#include "Data.hpp"
#include "IndexGenerator.hpp"

using namespace MM;
using namespace MM::full_matrix;

//user function
inline void anonymusAt6172(
		const double& dt,
		const NeighProxy<CellData<1>> input,
		double& output) {
		    output = dt * (-input[{-1}] + 2*input[{0}] - input[{1}]);
	        }

// host stub function
void mm_par_loop_anonymusAt6172(std::string name, Computation<1> &computation,
 FREE_SCALAR<> arg0, NEIGH<CellData<1>> arg1, OUT<CellData<1>> arg2) {
  const std::array<std::size_t, 1> &begin = computation.index_generator.get_begin();
  const std::array<std::size_t, 1> &end = computation.index_generator.get_end();
  for (std::size_t i = begin[0]; i < end[0]; i++) {
    const Coords<1> coords(i);
    std::size_t mat_index = 0;
    anonymusAt6172(arg0.get(coords, mat_index),
      arg1.get(coords, mat_index),
      arg2.get(coords, mat_index));
  }
}
