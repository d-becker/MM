//
// auto-generated by mm.py
//
#include <iostream>
#include "full_matrix/Computation.hpp"
#include "Arguments.hpp"
#include "Data.hpp"
#include "IndexGenerator.hpp"

using namespace MM;
using namespace MM::full_matrix;

//user function
inline void anonymusAt5611(Coords<2> index,
				double& y) {
      std::cout << index[0] << ", " << index[1] << std::endl;
			    }

// host stub function
void mm_par_loop_anonymusAt5611(std::string name, Computation<2> &computation,
 INDEX<2> arg0, OUT<CellData<2>> arg1) {
  const std::array<std::size_t, 2> &begin = computation.index_generator.get_begin();
  const std::array<std::size_t, 2> &end = computation.index_generator.get_end();
  for (std::size_t j = begin[1]; j < end[1]; j++) {
    for (std::size_t i = begin[0]; i < end[0]; i++) {
      const Coords<2> coords(i, j);
      std::size_t mat_index = 0;
      anonymusAt5611(arg0.get(coords, mat_index),
        arg1.get(coords, mat_index));
    }
  }
}
